const dsaProblems = [
  {
    title: "Maximum and Minimum Element in an Array",
    description: "Given an array of integers, find the maximum and minimum elements.",
    topic: "Array",
    testcases: [
      { input: "5\n1 2 3 4 5", expected_output: "5 1", isPublic: true },
      { input: "4\n-1 0 -2 -3", expected_output: "0 -3", isPublic: true },
      { input: "6\n10 10 10 10 10 10", expected_output: "10 10", isPublic: true },
      { input: "3\n100 200 300", expected_output: "300 100" },
      { input: "2\n-1000 1000", expected_output: "1000 -1000" },
      { input: "1\n7", expected_output: "7 7" },
      { input: "5\n5 4 3 2 1", expected_output: "5 1" },
      { input: "5\n2 3 1 4 5", expected_output: "5 1" },
      { input: "6\n1 3 5 7 9 2", expected_output: "9 1" },
      { input: "3\n-10 -20 -30", expected_output: "-10 -30" },
      { input: "4\n10 -10 5 -5", expected_output: "10 -10" },
      { input: "7\n0 0 0 0 0 0 0", expected_output: "0 0" },
      { input: "4\n99 44 55 11", expected_output: "99 11" },
      { input: "5\n23 67 89 1 45", expected_output: "89 1" },
      { input: "6\n7 14 28 21 35 49", expected_output: "49 7" },
      { input: "3\n2 2 2", expected_output: "2 2" },
      { input: "2\n2147483647 -2147483648", expected_output: "2147483647 -2147483648" },
      { input: "5\n0 -1 -2 -3 -4", expected_output: "0 -4" },
      { input: "5\n3 1 4 1 5", expected_output: "5 1" },
      { input: "6\n8 6 7 5 3 0", expected_output: "8 0" }
    ]
  },
  {
    title: "Reverse the Array",
    description: "Given an array of integers, reverse the elements of the array in-place.",
    topic: "Array",
    testcases: [
      { input: "5\n1 2 3 4 5", expected_output: "5 4 3 2 1", isPublic: true },
      { input: "4\n9 8 7 6", expected_output: "6 7 8 9", isPublic: true },
      { input: "3\n-1 -2 -3", expected_output: "-3 -2 -1", isPublic: true },
      { input: "2\n10 20", expected_output: "20 10" },
      { input: "1\n7", expected_output: "7" }
    ]
  },
  {
    title: "Maximum Subarray",
    description: "Find the contiguous subarray with the maximum sum within a given one-dimensional numeric array.",
    topic: "Array",
    testcases: [
      { input: "9\n-2 1 -3 4 -1 2 1 -5 4", expected_output: "6", isPublic: true },
      { input: "5\n1 2 3 4 5", expected_output: "15", isPublic: true },
      { input: "3\n-1 -2 -3", expected_output: "-1" },
      { input: "4\n2 -1 2 3", expected_output: "6" },
      { input: "6\n-2 -3 4 -1 -2 1", expected_output: "4" }
    ]
  },
  {
    title: "Contains Duplicate",
    description: "Given an array of integers, return true if any value appears at least twice, else false.",
    topic: "Array",
    testcases: [
      { input: "5\n1 2 3 1 4", expected_output: "true", isPublic: true },
      { input: "4\n1 2 3 4", expected_output: "false", isPublic: true },
      { input: "6\n5 6 7 8 5 9", expected_output: "true" },
      { input: "3\n10 20 30", expected_output: "false" },
      { input: "1\n99", expected_output: "false" }
    ]
  },
  {
    title: "Chocolate Distribution Problem",
    description: "Given an array of packet sizes and m students, distribute chocolate packets such that the difference between max and min chocolates is minimized.",
    topic: "Array",
    testcases: [
      { input: "8\n3 4 1 9 56 7 9 12\n5", expected_output: "6", isPublic: true },
      { input: "7\n7 3 2 4 9 12 56\n3", expected_output: "2", isPublic: true },
      { input: "5\n1 3 4 9 9\n3", expected_output: "1" },
      { input: "6\n12 4 7 9 2 23\n4", expected_output: "5" },
      { input: "5\n5 5 5 5 5\n2", expected_output: "0" }
    ]
  },
  {
    title: "Search in Rotated Sorted Array",
    description: "Given a rotated sorted array and a target, return its index. If not found, return -1.",
    topic: "Array",
    testcases: [
      { input: "7\n4 5 6 7 0 1 2\n0", expected_output: "4", isPublic: true },
      { input: "6\n6 7 8 1 2 3\n8", expected_output: "2", isPublic: true },
      { input: "5\n5 6 1 2 3\n4", expected_output: "-1", isPublic: true },
      { input: "4\n3 4 1 2\n3", expected_output: "0" },
      { input: "4\n3 4 1 2\n2", expected_output: "3" },
      { input: "5\n9 1 2 3 4\n9", expected_output: "0" },
      { input: "5\n9 1 2 3 4\n1", expected_output: "1" },
      { input: "6\n30 40 50 10 20 25\n10", expected_output: "3" },
      { input: "6\n30 40 50 10 20 25\n60", expected_output: "-1" },
      { input: "3\n3 1 2\n2", expected_output: "2" },
      { input: "2\n2 1\n1", expected_output: "1" },
      { input: "1\n5\n5", expected_output: "0" },
      { input: "1\n5\n3", expected_output: "-1" },
      { input: "7\n10 20 30 40 50 5 6\n6", expected_output: "6" },
      { input: "7\n10 20 30 40 50 5 6\n10", expected_output: "0" },
      { input: "7\n10 20 30 40 50 5 6\n50", expected_output: "4" },
      { input: "6\n6 7 1 2 3 4\n3", expected_output: "4" },
      { input: "6\n6 7 1 2 3 4\n5", expected_output: "-1" },
      { input: "8\n11 12 15 18 2 5 6 8\n5", expected_output: "5" },
      { input: "8\n11 12 15 18 2 5 6 8\n18", expected_output: "3" }
    ]
  },
  {
  title: "Next Permutation",
  description: "Rearrange numbers into the next greater permutation of numbers. If such arrangement is not possible, it must be rearranged as the lowest possible order (i.e., sorted in ascending order).",
  topic: "Array",
  testcases: [
    { input: "3\n1 2 3", expected_output: "1 3 2", isPublic: true },
    { input: "3\n3 2 1", expected_output: "1 2 3", isPublic: true },
    { input: "4\n1 1 5 4", expected_output: "1 4 1 5", isPublic: true },
    { input: "3\n1 3 2", expected_output: "2 1 3" },
    { input: "3\n2 3 1", expected_output: "3 1 2" },
    { input: "5\n5 4 3 2 1", expected_output: "1 2 3 4 5" },
    { input: "4\n1 2 3 4", expected_output: "1 2 4 3" },
    { input: "4\n1 3 2 4", expected_output: "1 3 4 2" },
    { input: "3\n2 1 3", expected_output: "2 3 1" },
    { input: "3\n2 3 1", expected_output: "3 1 2" },
    { input: "3\n3 1 2", expected_output: "3 2 1" },
    { input: "2\n1 2", expected_output: "2 1" },
    { input: "2\n2 1", expected_output: "1 2" },
    { input: "1\n5", expected_output: "5" },
    { input: "4\n1 5 1 1", expected_output: "5 1 1 1" },
    { input: "4\n1 3 4 2", expected_output: "1 4 2 3" },
    { input: "4\n4 3 2 1", expected_output: "1 2 3 4" },
    { input: "5\n2 1 5 4 3", expected_output: "2 3 1 4 5" },
    { input: "3\n2 2 1", expected_output: "1 2 2" },
    { input: "4\n2 4 3 1", expected_output: "3 1 2 4" }
  ]
},
  {
  title: "Best time to Buy and Sell Stock",
  description: "Find the maximum profit from a single buy-sell transaction in a given list of stock prices.",
  topic: "Array",
  testcases: [
    { input: "6\n7 1 5 3 6 4", expected_output: "5", isPublic: true },
    { input: "5\n7 6 4 3 1", expected_output: "0", isPublic: true },
    { input: "6\n1 2 3 4 5 6", expected_output: "5", isPublic: true },
    { input: "1\n10", expected_output: "0" },
    { input: "2\n10 20", expected_output: "10" },
    { input: "3\n10 20 5", expected_output: "10" },
    { input: "4\n4 3 2 1", expected_output: "0" },
    { input: "6\n3 2 6 1 4 5", expected_output: "4" },
    { input: "7\n2 1 2 0 1 2 3", expected_output: "3" },
    { input: "4\n1 10 1 10", expected_output: "9" },
    { input: "5\n2 4 1 3 5", expected_output: "4" },
    { input: "6\n6 1 3 2 4 7", expected_output: "6" },
    { input: "4\n1 2 1 2", expected_output: "1" },
    { input: "3\n5 5 5", expected_output: "0" },
    { input: "3\n1 1 2", expected_output: "1" },
    { input: "6\n2 6 1 3 4 5", expected_output: "4" },
    { input: "6\n5 4 3 2 6 7", expected_output: "5" },
    { input: "5\n10 9 8 7 6", expected_output: "0" },
    { input: "5\n1 2 90 10 110", expected_output: "109" },
    { input: "4\n3 3 5 0", expected_output: "2" }
  ]
},
  {
  title: "Repeat and Missing Number Array",
  description: "Find the repeating and the missing number in the array. One number is repeated and one number is missing from 1 to N.",
  topic: "Array",
  testcases: [
    { input: "5\n4 3 6 2 1 1", expected_output: "1 5", isPublic: true },
    { input: "3\n3 1 1", expected_output: "1 2", isPublic: true },
    { input: "4\n1 2 4 4", expected_output: "4 3", isPublic: true },
    { input: "6\n1 2 2 4 5 6", expected_output: "2 3" },
    { input: "6\n1 2 3 4 4 6", expected_output: "4 5" },
    { input: "6\n1 2 3 5 5 6", expected_output: "5 4" },
    { input: "2\n2 2", expected_output: "2 1" },
    { input: "5\n5 3 2 1 1", expected_output: "1 4" },
    { input: "3\n1 2 2", expected_output: "2 3" },
    { input: "3\n2 2 3", expected_output: "2 1" },
    { input: "3\n1 3 3", expected_output: "3 2" },
    { input: "4\n2 1 1 4", expected_output: "1 3" },
    { input: "5\n2 5 1 3 3", expected_output: "3 4" },
    { input: "6\n6 2 3 4 5 5", expected_output: "5 1" },
    { input: "6\n1 3 3 4 5 6", expected_output: "3 2" },
    { input: "7\n1 2 3 5 6 7 7", expected_output: "7 4" },
    { input: "4\n1 1 3 4", expected_output: "1 2" },
    { input: "5\n2 3 4 5 5", expected_output: "5 1" },
    { input: "6\n1 1 3 4 5 6", expected_output: "1 2" },
    { input: "6\n1 2 3 4 6 6", expected_output: "6 5" }
  ]
},
  {
  title: "Kth-Largest Element in an Array",
  description: "Find the kth largest element in the array. Note that it is the kth largest element in sorted order, not the kth distinct element.",
  topic: "Array",
  testcases: [
    { input: "6\n3 2 1 5 6 4\n2", expected_output: "5", isPublic: true },
    { input: "5\n1 2 3 4 5\n1", expected_output: "5", isPublic: true },
    { input: "5\n5 4 3 2 1\n2", expected_output: "4", isPublic: true },
    { input: "7\n7 10 4 3 20 15 9\n3", expected_output: "10" },
    { input: "4\n2 1 4 3\n4", expected_output: "1" },
    { input: "6\n4 5 6 3 2 1\n6", expected_output: "1" },
    { input: "3\n3 2 1\n2", expected_output: "2" },
    { input: "3\n3 3 3\n1", expected_output: "3" },
    { input: "3\n3 3 3\n2", expected_output: "3" },
    { input: "3\n3 3 3\n3", expected_output: "3" },
    { input: "5\n5 3 1 2 4\n5", expected_output: "1" },
    { input: "2\n10 20\n2", expected_output: "10" },
    { input: "6\n100 90 80 70 60 50\n3", expected_output: "80" },
    { input: "4\n-1 -2 -3 -4\n2", expected_output: "-2" },
    { input: "4\n-1 -2 -3 -4\n4", expected_output: "-4" },
    { input: "5\n1 2 2 3 3\n2", expected_output: "3" },
    { input: "7\n10 20 30 40 50 60 70\n7", expected_output: "10" },
    { input: "1\n100\n1", expected_output: "100" },
    { input: "6\n1 1 1 1 1 1\n3", expected_output: "1" },
    { input: "6\n6 5 4 3 2 1\n4", expected_output: "3" }
  ]
},
  {
  title: "Trapping Rain Water",
  description: "Compute how much water can be trapped after raining, given an array representing elevation map.",
  topic: "Array",
  testcases: [
    { input: "12\n0 1 0 2 1 0 1 3 2 1 2 1", expected_output: "6", isPublic: true },
    { input: "6\n4 2 0 3 2 5", expected_output: "9", isPublic: true },
    { input: "3\n2 0 2", expected_output: "2", isPublic: true },
    { input: "6\n1 0 2 1 0 3", expected_output: "5" },
    { input: "5\n2 0 2 0 2", expected_output: "4" },
    { input: "7\n0 1 2 3 4 5 6", expected_output: "0" },
    { input: "7\n6 5 4 3 2 1 0", expected_output: "0" },
    { input: "8\n3 0 2 0 4 0 1 3", expected_output: "10" },
    { input: "4\n4 2 3 1", expected_output: "1" },
    { input: "5\n5 4 1 2 3", expected_output: "3" },
    { input: "6\n1 2 1 2 1 2", expected_output: "1" },
    { input: "4\n2 0 0 2", expected_output: "4" },
    { input: "5\n1 1 1 1 1", expected_output: "0" },
    { input: "6\n1 0 1 0 1 0", expected_output: "2" },
    { input: "8\n5 2 1 2 1 5 2 1", expected_output: "13" },
    { input: "7\n1 7 5 3 2 6 1", expected_output: "9" },
    { input: "6\n0 1 0 2 1 3", expected_output: "4" },
    { input: "5\n2 0 2 0 1", expected_output: "3" },
    { input: "5\n0 1 0 2 1", expected_output: "1" },
    { input: "4\n2 0 1 3", expected_output: "3" }
  ]
},
  {
  title: "Product of Array Except Self",
  description: "Return an array such that each element at index i is the product of all elements in the array except nums[i], without using division and in O(n) time.",
  topic: "Array",
  testcases: [
    { input: "4\n1 2 3 4", expected_output: "24 12 8 6", isPublic: true },
    { input: "3\n2 3 4", expected_output: "12 8 6", isPublic: true },
    { input: "5\n5 4 3 2 1", expected_output: "24 30 40 60 120", isPublic: true },
    { input: "3\n1 1 1", expected_output: "1 1 1" },
    { input: "4\n0 2 3 4", expected_output: "24 0 0 0" },
    { input: "4\n2 0 3 4", expected_output: "0 24 0 0" },
    { input: "4\n2 3 0 4", expected_output: "0 0 24 0" },
    { input: "5\n1 2 3 4 0", expected_output: "0 0 0 0 24" },
    { input: "1\n10", expected_output: "1" },
    { input: "2\n3 4", expected_output: "4 3" },
    { input: "3\n9 1 2", expected_output: "2 18 9" },
    { input: "3\n0 0 2", expected_output: "0 0 0" },
    { input: "4\n2 5 7 3", expected_output: "105 42 30 70" },
    { input: "4\n4 3 2 1", expected_output: "6 8 12 24" },
    { input: "5\n10 0 0 10 10", expected_output: "0 0 0 0 0" },
    { input: "4\n1 2 3 0", expected_output: "0 0 0 6" },
    { input: "4\n0 1 2 3", expected_output: "6 0 0 0" },
    { input: "4\n1 2 3 5", expected_output: "30 15 10 6" },
    { input: "3\n1 2 0", expected_output: "0 0 2" },
    { input: "3\n1 0 0", expected_output: "0 0 0" }
  ]
},
  {
  title: "Maximum Product Subarray",
  description: "Find the contiguous subarray within an array that has the largest product.",
  topic: "Array",
  testcases: [
    { input: "4\n2 3 -2 4", expected_output: "6", isPublic: true },
    { input: "3\n-2 0 -1", expected_output: "0", isPublic: true },
    { input: "5\n-2 3 -4 -1 2", expected_output: "48", isPublic: true },
    { input: "3\n-1 -3 -10", expected_output: "30" },
    { input: "4\n6 -3 -10 0", expected_output: "180" },
    { input: "5\n-2 -3 0 -2 -40", expected_output: "80" },
    { input: "3\n0 0 0", expected_output: "0" },
    { input: "4\n2 -5 -2 -4", expected_output: "80" },
    { input: "5\n1 2 3 4 5", expected_output: "120" },
    { input: "5\n-1 -2 -3 -4 -5", expected_output: "120" },
    { input: "3\n1 -2 3", expected_output: "3" },
    { input: "4\n-2 0 -1 2", expected_output: "2" },
    { input: "4\n1 0 -1 2", expected_output: "2" },
    { input: "6\n-1 2 -3 4 -5 6", expected_output: "720" },
    { input: "3\n1 2 -3", expected_output: "2" },
    { input: "4\n1 -2 3 -4", expected_output: "24" },
    { input: "5\n-1 0 -2 0 -3", expected_output: "0" },
    { input: "2\n-2 -3", expected_output: "6" },
    { input: "2\n1 -2", expected_output: "1" },
    { input: "3\n0 -1 2", expected_output: "2" }
  ]
},
  {
  title: "Find Minimum in Rotated Sorted Array",
  description: "Find the minimum element in a rotated sorted array with no duplicate elements.",
  topic: "Array",
  testcases: [
    { input: "5\n3 4 5 1 2", expected_output: "1", isPublic: true },
    { input: "4\n2 3 4 1", expected_output: "1", isPublic: true },
    { input: "7\n6 7 1 2 3 4 5", expected_output: "1", isPublic: true },
    { input: "5\n5 6 7 8 1", expected_output: "1" },
    { input: "6\n4 5 6 7 0 1", expected_output: "0" },
    { input: "3\n2 3 1", expected_output: "1" },
    { input: "3\n1 2 3", expected_output: "1" },
    { input: "3\n3 1 2", expected_output: "1" },
    { input: "5\n2 3 4 5 1", expected_output: "1" },
    { input: "4\n3 4 1 2", expected_output: "1" },
    { input: "6\n30 40 50 10 20 25", expected_output: "10" },
    { input: "2\n2 1", expected_output: "1" },
    { input: "2\n1 2", expected_output: "1" },
    { input: "1\n9", expected_output: "9" },
    { input: "6\n8 9 10 1 2 3", expected_output: "1" },
    { input: "7\n10 11 12 13 14 1 2", expected_output: "1" },
    { input: "4\n1 2 3 4", expected_output: "1" },
    { input: "4\n4 1 2 3", expected_output: "1" },
    { input: "6\n5 6 7 8 9 1", expected_output: "1" },
    { input: "3\n9 1 3", expected_output: "1" }
  ]
},
  {
  title: "Find Pair with Sum in Sorted & Rotated Array",
  description: "Check if a pair with the given sum exists in a sorted and rotated array.",
  topic: "Array",
  testcases: [
    { input: "6\n11 15 6 8 9 10\n16", expected_output: "true", isPublic: true },
    { input: "6\n11 15 26 38 9 10\n35", expected_output: "true", isPublic: true },
    { input: "6\n4 5 1 2 3 6\n20", expected_output: "false", isPublic: true },
    { input: "5\n5 6 7 1 2\n13", expected_output: "true" },
    { input: "4\n6 8 1 2\n14", expected_output: "true" },
    { input: "5\n3 4 5 1 2\n10", expected_output: "true" },
    { input: "4\n8 9 1 2\n17", expected_output: "true" },
    { input: "5\n3 4 5 1 2\n11", expected_output: "false" },
    { input: "6\n7 9 10 11 1 2\n13", expected_output: "true" },
    { input: "6\n1 2 3 4 5 6\n7", expected_output: "true" },
    { input: "6\n1 2 3 4 5 6\n20", expected_output: "false" },
    { input: "7\n10 11 15 2 3 6 7\n9", expected_output: "true" },
    { input: "4\n1 2 3 4\n8", expected_output: "false" },
    { input: "5\n5 1 2 3 4\n6", expected_output: "true" },
    { input: "5\n5 6 1 2 3\n9", expected_output: "true" },
    { input: "5\n2 3 4 5 1\n6", expected_output: "true" },
    { input: "4\n4 5 1 2\n9", expected_output: "true" },
    { input: "3\n1 2 3\n4", expected_output: "true" },
    { input: "3\n1 2 3\n10", expected_output: "false" },
    { input: "2\n1 2\n3", expected_output: "true" }
  ]
},
  {
  title: "3sum",
  description: "Find all unique triplets in the array which give the sum of zero.",
  topic: "Array",
  testcases: [
    { input: "6\n-1 0 1 2 -1 -4", expected_output: "[-1,-1,2] [-1,0,1]", isPublic: true },
    { input: "5\n0 0 0 0 0", expected_output: "[0,0,0]", isPublic: true },
    { input: "7\n-2 0 1 1 2 -1 -4", expected_output: "[-2,1,1] [-1,0,1]", isPublic: true },
    { input: "4\n1 2 -2 -1", expected_output: "[-2,1,1]" },
    { input: "5\n3 -1 -7 4 5", expected_output: "[-7,3,4]" },
    { input: "6\n-2 0 0 2 2 -2", expected_output: "[-2,0,2] [0,0,0]" },
    { input: "6\n-4 -2 -2 -2 0 2", expected_output: "[-4,2,2]" },
    { input: "4\n-1 -1 -1 2", expected_output: "[-1,-1,2]" },
    { input: "6\n-3 -1 0 1 2 3", expected_output: "[-3,0,3] [-3,1,2] [-1,0,1]" },
    { input: "5\n0 -1 1 2 -2", expected_output: "[-2,0,2] [-1,0,1]" },
    { input: "3\n1 2 3", expected_output: "" },
    { input: "3\n-1 -2 -3", expected_output: "" },
    { input: "7\n-5 1 10 2 -1 -4 -2", expected_output: "[-5,-1,6] [-5,1,4] [-4,-2,6]" },
    { input: "6\n-2 -1 0 1 2 3", expected_output: "[-2,-1,3] [-2,0,2] [-1,0,1]" },
    { input: "5\n-2 1 1 1 1", expected_output: "[-2,1,1]" },
    { input: "5\n-2 -2 1 1 2", expected_output: "[-2,0,2] [-2,1,1]" },
    { input: "6\n-1 -1 2 2 0 0", expected_output: "[-1,-1,2] [-1,0,1] [0,0,0]" },
    { input: "3\n0 1 -1", expected_output: "[-1,0,1]" },
    { input: "4\n-1 0 1 0", expected_output: "[-1,0,1]" },
    { input: "5\n-1 -1 -1 2 2", expected_output: "[-1,-1,2]" }
  ]
},
  {
  title: "Container With Most Water",
  description: "Find two lines that together with the x-axis form a container such that the container contains the most water.",
  topic: "Array",
  testcases: [
    { input: "9\n1 8 6 2 5 4 8 3 7", expected_output: "49", isPublic: true },
    { input: "2\n1 1", expected_output: "1", isPublic: true },
    { input: "5\n1 2 1 2 1", expected_output: "4", isPublic: true },
    { input: "4\n1 2 4 3", expected_output: "4" },
    { input: "3\n1 3 2", expected_output: "2" },
    { input: "6\n1 3 2 5 25 24", expected_output: "24" },
    { input: "4\n1 100 100 1", expected_output: "3" },
    { input: "6\n1 2 1 3 4 1", expected_output: "6" },
    { input: "7\n4 3 2 1 4 2 3", expected_output: "16" },
    { input: "3\n5 2 4", expected_output: "8" },
    { input: "5\n6 9 3 4 5", expected_output: "24" },
    { input: "5\n10 1 10 1 10", expected_output: "40" },
    { input: "4\n2 3 4 5", expected_output: "6" },
    { input: "4\n5 4 3 2", expected_output: "6" },
    { input: "4\n1 2 3 4", expected_output: "4" },
    { input: "4\n4 3 2 1", expected_output: "4" },
    { input: "2\n1000 1000", expected_output: "1000" },
    { input: "5\n2 1 5 6 2", expected_output: "8" },
    { input: "6\n1 2 3 4 5 6", expected_output: "9" },
    { input: "6\n6 5 4 3 2 1", expected_output: "9" }
  ]
},
  {
  title: "Given Sum Pair",
  description: "Find if a pair exists with the given sum in the array. Return true if such a pair exists, otherwise false.",
  topic: "Array",
  testcases: [
    { input: "6\n8 7 2 5 3 1\n10", expected_output: "true", isPublic: true },
    { input: "4\n5 6 7 8\n15", expected_output: "true", isPublic: true },
    { input: "5\n1 2 3 9 11\n8", expected_output: "false", isPublic: true },
    { input: "5\n1 4 45 6 10\n16", expected_output: "true" },
    { input: "6\n10 20 30 40 50 60\n100", expected_output: "true" },
    { input: "3\n1 2 3\n7", expected_output: "false" },
    { input: "2\n1 5\n6", expected_output: "true" },
    { input: "3\n1 5 7\n8", expected_output: "true" },
    { input: "4\n2 4 6 8\n10", expected_output: "true" },
    { input: "4\n2 4 6 8\n17", expected_output: "false" },
    { input: "5\n1 2 3 4 5\n9", expected_output: "true" },
    { input: "5\n1 2 3 4 5\n10", expected_output: "false" },
    { input: "5\n0 0 0 0 0\n0", expected_output: "true" },
    { input: "2\n5 5\n10", expected_output: "true" },
    { input: "3\n-1 -2 -3\n-4", expected_output: "true" },
    { input: "3\n-1 -2 -3\n1", expected_output: "false" },
    { input: "6\n3 3 3 3 3 3\n6", expected_output: "true" },
    { input: "4\n10 22 28 29\n50", expected_output: "true" },
    { input: "4\n1 2 3 4\n3", expected_output: "true" },
    { input: "5\n1 1 1 1 1\n2", expected_output: "true" }
  ]
},
  {
  title: "Kth - Smallest Element",
  description: "Find the kth smallest element in an unsorted array using an efficient algorithm.",
  topic: "Array",
  testcases: [
    { input: "6\n7 10 4 3 20 15\n3", expected_output: "7", isPublic: true },
    { input: "5\n5 3 1 2 4\n2", expected_output: "2", isPublic: true },
    { input: "5\n1 2 3 4 5\n5", expected_output: "5", isPublic: true },
    { input: "6\n12 3 5 7 19 1\n4", expected_output: "7" },
    { input: "4\n10 20 15 17\n2", expected_output: "15" },
    { input: "3\n3 2 1\n1", expected_output: "1" },
    { input: "3\n3 2 1\n3", expected_output: "3" },
    { input: "5\n9 8 7 6 5\n3", expected_output: "7" },
    { input: "5\n5 4 3 2 1\n1", expected_output: "1" },
    { input: "4\n2 3 1 4\n4", expected_output: "4" },
    { input: "2\n100 200\n1", expected_output: "100" },
    { input: "2\n100 200\n2", expected_output: "200" },
    { input: "6\n1 2 3 4 5 6\n6", expected_output: "6" },
    { input: "6\n6 5 4 3 2 1\n6", expected_output: "6" },
    { input: "5\n10 10 10 10 10\n3", expected_output: "10" },
    { input: "5\n5 1 2 2 4\n2", expected_output: "2" },
    { input: "3\n1 3 2\n3", expected_output: "3" },
    { input: "1\n999", expected_output: "999" },
    { input: "4\n0 -1 -2 -3\n2", expected_output: "-2" },
    { input: "4\n2 8 6 4\n3", expected_output: "6" }
  ]
},
  {
  title: "Merge Overlapping Intervals",
  description: "Merge all overlapping intervals from a given list of intervals.",
  topic: "Array",
  testcases: [
    { input: "4\n1 3\n2 6\n8 10\n15 18", expected_output: "[1,6] [8,10] [15,18]", isPublic: true },
    { input: "2\n1 4\n4 5", expected_output: "[1,5]", isPublic: true },
    { input: "3\n1 4\n2 3\n5 6", expected_output: "[1,4] [5,6]", isPublic: true },
    { input: "2\n1 10\n2 3", expected_output: "[1,10]" },
    { input: "3\n1 2\n3 4\n5 6", expected_output: "[1,2] [3,4] [5,6]" },
    { input: "3\n1 5\n2 3\n4 8", expected_output: "[1,8]" },
    { input: "4\n6 8\n1 9\n2 4\n4 7", expected_output: "[1,9]" },
    { input: "2\n5 6\n1 2", expected_output: "[1,2] [5,6]" },
    { input: "5\n1 3\n2 4\n5 7\n6 8\n9 10", expected_output: "[1,4] [5,8] [9,10]" },
    { input: "4\n1 4\n0 4\n3 4\n2 4", expected_output: "[0,4]" },
    { input: "3\n1 4\n0 2\n3 5", expected_output: "[0,5]" },
    { input: "3\n2 3\n4 5\n6 7", expected_output: "[2,3] [4,5] [6,7]" },
    { input: "1\n1 2", expected_output: "[1,2]" },
    { input: "2\n1 5\n6 10", expected_output: "[1,5] [6,10]" },
    { input: "3\n1 2\n2 3\n3 4", expected_output: "[1,4]" },
    { input: "3\n5 10\n1 3\n2 4", expected_output: "[1,4] [5,10]" },
    { input: "4\n1 2\n2 3\n3 4\n5 6", expected_output: "[1,4] [5,6]" },
    { input: "2\n2 2\n2 2", expected_output: "[2,2]" },
    { input: "2\n1 4\n0 5", expected_output: "[0,5]" },
    { input: "3\n1 5\n10 15\n5 10", expected_output: "[1,15]" }
  ]
},
 {
  title: "Find Minimum Number of Merge Operations to Make an Array Palindrome",
  description: "Given an array, return the minimum number of merge operations required to make the array a palindrome.",
  topic: "Array",
  testcases: [
    { input: "5\n1 4 5 1 1", expected_output: "1", isPublic: true },
    { input: "5\n11 14 15 99 11", expected_output: "2", isPublic: true },
    { input: "4\n1 2 3 1", expected_output: "1", isPublic: true },
    { input: "3\n1 2 1", expected_output: "0" },
    { input: "3\n1 2 3", expected_output: "2" },
    { input: "6\n1 2 3 3 2 1", expected_output: "0" },
    { input: "4\n1 3 3 1", expected_output: "0" },
    { input: "5\n1 4 4 4 1", expected_output: "1" },
    { input: "2\n10 20", expected_output: "1" },
    { input: "5\n5 3 1 3 5", expected_output: "0" },
    { input: "6\n1 2 3 4 2 1", expected_output: "1" },
    { input: "5\n1 3 2 2 1", expected_output: "1" },
    { input: "4\n1 2 3 4", expected_output: "3" },
    { input: "3\n2 3 2", expected_output: "0" },
    { input: "1\n9", expected_output: "0" },
    { input: "3\n1 1 1", expected_output: "0" },
    { input: "3\n1 3 2", expected_output: "2" },
    { input: "6\n1 2 3 4 5 6", expected_output: "5" },
    { input: "5\n1 2 3 2 1", expected_output: "0" },
    { input: "4\n1 2 2 1", expected_output: "0" }
  ]
},
  {
  title: "Given an Array of Numbers Arrange the Numbers to Form the Biggest Number",
  description: "Arrange the numbers in such a way that they form the largest possible number.",
  topic: "Array",
  testcases: [
    { input: "4\n54 546 548 60", expected_output: "6054854654", isPublic: true },
    { input: "3\n1 34 3", expected_output: "3431", isPublic: true },
    { input: "5\n5 50 56 9 1", expected_output: "9565501", isPublic: true },
    { input: "3\n12 121 120", expected_output: "12121120" },
    { input: "3\n0 0 0", expected_output: "0" },
    { input: "2\n10 2", expected_output: "210" },
    { input: "4\n3 30 34 5", expected_output: "534330" },
    { input: "3\n9 91 90", expected_output: "99190" },
    { input: "3\n8 89 890", expected_output: "898908" },
    { input: "4\n1 10 100 1000", expected_output: "11001000" },
    { input: "2\n121 12", expected_output: "12121" },
    { input: "4\n0 0 0 1", expected_output: "1000" },
    { input: "3\n20 1 34", expected_output: "34201" },
    { input: "5\n1 11 111 1111 0", expected_output: "1111111110" },
    { input: "4\n98 9 97 969", expected_output: "99897969" },
    { input: "3\n21 2 23", expected_output: "23221" },
    { input: "3\n17 171 72", expected_output: "7217171" },
    { input: "3\n420 42 423", expected_output: "42423420" },
    { input: "3\n30 3 34", expected_output: "34330" },
    { input: "3\n1 9 0", expected_output: "910" }
  ]
},
  {
  title: "Space Optimization Using Bit Manipulations",
  description: "Use bitwise operations to track presence/absence of elements in constant space. Assume elements are within a small known range (e.g., 1 to 32). Output 'Mask Created' if operations succeed.",
  topic: "Array",
  testcases: [
    { input: "5\n1 3 5 7 9", expected_output: "Mask Created", isPublic: true },
    { input: "4\n2 4 6 8", expected_output: "Mask Created", isPublic: true },
    { input: "6\n1 2 4 8 16 32", expected_output: "Mask Created", isPublic: true },
    { input: "3\n1 1 1", expected_output: "Mask Created" },
    { input: "5\n1 2 3 4 5", expected_output: "Mask Created" },
    { input: "5\n5 10 15 20 25", expected_output: "Mask Created" },
    { input: "6\n6 7 8 9 10 11", expected_output: "Mask Created" },
    { input: "7\n1 3 5 7 9 11 13", expected_output: "Mask Created" },
    { input: "4\n10 20 30 31", expected_output: "Mask Created" },
    { input: "5\n16 17 18 19 20", expected_output: "Mask Created" },
    { input: "2\n31 32", expected_output: "Mask Created" },
    { input: "3\n1 31 32", expected_output: "Mask Created" },
    { input: "1\n15", expected_output: "Mask Created" },
    { input: "5\n3 6 9 12 15", expected_output: "Mask Created" },
    { input: "4\n1 2 2 1", expected_output: "Mask Created" },
    { input: "3\n4 8 16", expected_output: "Mask Created" },
    { input: "2\n5 6", expected_output: "Mask Created" },
    { input: "4\n7 14 21 28", expected_output: "Mask Created" },
    { input: "5\n2 4 6 8 10", expected_output: "Mask Created" },
    { input: "6\n11 22 1 2 3 4", expected_output: "Mask Created" }
  ]
},
  {
  title: "Subarray Sum Divisible K",
  description: "Count the total number of subarrays whose sum is divisible by a given integer K.",
  topic: "Array",
  testcases: [
    { input: "5\n4 5 0 -2 -3\n5", expected_output: "7", isPublic: true },
    { input: "6\n5 0 0 0 0 5\n5", expected_output: "21", isPublic: true },
    { input: "3\n1 2 3\n3", expected_output: "3", isPublic: true },
    { input: "4\n1 2 3 4\n2", expected_output: "4" },
    { input: "5\n1 2 3 4 1\n3", expected_output: "4" },
    { input: "6\n-1 2 9 -4 -2 3\n4", expected_output: "4" },
    { input: "4\n2 2 2 2\n2", expected_output: "10" },
    { input: "5\n5 5 5 5 5\n5", expected_output: "15" },
    { input: "4\n3 3 3 3\n3", expected_output: "10" },
    { input: "6\n-1 -1 -1 -1 -1 -1\n3", expected_output: "4" },
    { input: "3\n0 0 0\n1", expected_output: "6" },
    { input: "2\n1 2\n5", expected_output: "0" },
    { input: "3\n4 5 6\n5", expected_output: "3" },
    { input: "4\n1 -1 1 -1\n2", expected_output: "4" },
    { input: "4\n10 20 30 40\n10", expected_output: "10" },
    { input: "3\n6 1 2\n3", expected_output: "3" },
    { input: "4\n0 0 0 0\n2", expected_output: "10" },
    { input: "4\n-5 -5 5 5\n5", expected_output: "6" },
    { input: "5\n3 -2 1 -4 2\n3", expected_output: "5" },
    { input: "6\n7 -2 -3 1 2 4\n5", expected_output: "6" }
  ]
},
  {
  title: "Print all Possible Combinations of r Elements in a Given Array of Size n",
  description: "Print all r-sized combinations (without repetition) from a given array of size n.",
  topic: "Array",
  testcases: [
    { input: "5\n1 2 3 4 5\n3", expected_output: "[1,2,3] [1,2,4] [1,2,5] [1,3,4] [1,3,5] [1,4,5] [2,3,4] [2,3,5] [2,4,5] [3,4,5]", isPublic: true },
    { input: "4\na b c d\n2", expected_output: "[a,b] [a,c] [a,d] [b,c] [b,d] [c,d]", isPublic: true },
    { input: "3\n10 20 30\n2", expected_output: "[10,20] [10,30] [20,30]", isPublic: true },
    { input: "4\n1 2 3 4\n1", expected_output: "[1] [2] [3] [4]" },
    { input: "4\n1 2 3 4\n2", expected_output: "[1,2] [1,3] [1,4] [2,3] [2,4] [3,4]" },
    { input: "3\nx y z\n3", expected_output: "[x,y,z]" },
    { input: "5\na b c d e\n2", expected_output: "[a,b] [a,c] [a,d] [a,e] [b,c] [b,d] [b,e] [c,d] [c,e] [d,e]" },
    { input: "5\n1 2 3 4 5\n4", expected_output: "[1,2,3,4] [1,2,3,5] [1,2,4,5] [1,3,4,5] [2,3,4,5]" },
    { input: "2\n5 10\n2", expected_output: "[5,10]" },
    { input: "2\n5 10\n1", expected_output: "[5] [10]" },
    { input: "3\napple banana cherry\n2", expected_output: "[apple,banana] [apple,cherry] [banana,cherry]" },
    { input: "4\n1 3 5 7\n2", expected_output: "[1,3] [1,5] [1,7] [3,5] [3,7] [5,7]" },
    { input: "3\ntrue false maybe\n2", expected_output: "[true,false] [true,maybe] [false,maybe]" },
    { input: "3\n9 8 7\n2", expected_output: "[9,8] [9,7] [8,7]" },
    { input: "3\nA B C\n1", expected_output: "[A] [B] [C]" },
    { input: "1\n42\n1", expected_output: "[42]" },
    { input: "5\n1 1 1 1 1\n3", expected_output: "[1,1,1]" },
    { input: "6\np q r s t u\n2", expected_output: "[p,q] [p,r] [p,s] [p,t] [p,u] [q,r] [q,s] [q,t] [q,u] [r,s] [r,t] [r,u] [s,t] [s,u] [t,u]" },
    { input: "3\nabc def ghi\n3", expected_output: "[abc,def,ghi]" },
    { input: "2\none two\n2", expected_output: "[one,two]" }
  ]
},
  {
  title: "Mo's Algorithm",
  description: "Efficiently process multiple range queries (like frequency or sum) on a static array using Mo's Algorithm.",
  topic: "Array",
  testcases: [
    { input: "6\n1 1 2 1 3 4\n3\n0 5\n1 3\n2 4", expected_output: "4 3 3", isPublic: true },
    { input: "5\n1 2 1 3 4\n2\n0 4\n1 3", expected_output: "4 3", isPublic: true },
    { input: "6\n1 2 3 4 2 1\n3\n1 4\n0 5\n2 3", expected_output: "4 4 2", isPublic: true },
    { input: "3\n1 2 3\n1\n0 2", expected_output: "3" },
    { input: "4\n1 1 1 1\n2\n0 3\n1 2", expected_output: "1 1" },
    { input: "5\n1 2 1 3 2\n2\n0 4\n1 3", expected_output: "3 3" },
    { input: "6\n2 2 2 2 2 2\n3\n0 1\n1 4\n2 5", expected_output: "1 1 1" },
    { input: "4\n1 2 3 4\n1\n1 3", expected_output: "3" },
    { input: "5\n1 3 3 3 2\n2\n0 4\n1 3", expected_output: "3 1" },
    { input: "3\n9 8 7\n1\n0 2", expected_output: "3" },
    { input: "6\n1 3 2 3 1 2\n2\n1 4\n2 5", expected_output: "3 3" },
    { input: "5\n5 5 5 5 5\n2\n0 2\n2 4", expected_output: "1 1" },
    { input: "6\n6 1 2 1 6 6\n2\n0 5\n1 4", expected_output: "3 3" },
    { input: "4\n1 4 1 2\n2\n0 1\n2 3", expected_output: "2 2" },
    { input: "5\n1 2 1 3 4\n3\n0 4\n1 3\n2 4", expected_output: "4 3 3" },
    { input: "6\n2 1 1 2 3 4\n3\n1 4\n0 5\n2 3", expected_output: "3 4 2" },
    { input: "4\n1 2 3 4\n2\n0 1\n2 3", expected_output: "2 2" },
    { input: "5\n1 1 1 2 2\n2\n0 2\n3 4", expected_output: "1 1" },
    { input: "5\n1 2 3 4 5\n1\n0 4", expected_output: "5" },
    { input: "6\n1 2 2 3 3 4\n3\n0 1\n2 4\n1 5", expected_output: "2 2 3" }
  ]
}
];

module.exports = { data: dsaProblems };
